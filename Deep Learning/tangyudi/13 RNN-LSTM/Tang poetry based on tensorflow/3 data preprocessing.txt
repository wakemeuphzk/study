数据预处理模块
简单的数据清洗

诗的格式：每行一首诗，诗的标题与内容由“:”分隔

def process_poems(file_name)

# 取出所有诗中所有的字构成一维数组,比如['低','头','思','故','乡','低',]
    all_words = [word for poem in poems for word in poem]
   
    # 以字为key，该字出现的次数为value形成字典,按value从大到小排列{'不'：6000,'的'：5800,}
    counter = collections.Counter(all_words)
    # 对计数结果进行由大到小排序，返回的结果是一个数组，数组元素为(某个字，该字的次数),[('不'：6000),('的'：5800),]
    count_pairs = sorted(counter.items(), key=lambda x: x[1], reverse=True)
    # 按照出现次数由大到小的顺序取出所有的字放到一个小括号中，字与字之间用逗号隔开,('不','的',)
    words, _ = zip(*count_pairs)
    # 末尾加一个空格,('不','的', , ,' ')
    words = words + (' ',)
    
    
    
    zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。
如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。
